{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MIN_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x9c1e17d28f2e127626576ea055eb54e1dc18fc9de2ac777fb718354005d374dd",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1063685",
    "logsBloom": "0x
    "blockHash": "0xe89abb867df2d590c31196b0c842e5398d938e5e3cbfe59e64b61880c3fa7bf5",
    "transactionHash": "0x9c1e17d28f2e127626576ea055eb54e1dc18fc9de2ac777fb718354005d374dd",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1063685",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "5dfd24ae6b4a1e3570eeff5fc1060fde",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MIN_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Viktor M\",\"details\":\"The contract is used for getting price from oracle\",\"kind\":\"dev\",\"methods\":{},\"title\":\"A contact for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Demo sample\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0x257a8d28fa83d3d942547c8e129ef465e4b5f3f31171e7be4739a4c98da6b4f0\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Pragma first\\npragma solidity ^0.8.24;\\n\\n// Imports after pragma\\nimport {PriceConverter} from \\\"contracts/PriceConverter.sol\\\";\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Error codes naming convention below\\nerror FundMe__NotOwner();\\n\\n// Interfaces\\n\\n// Libraries\\n\\n// Contracts\\n/// @title A contact for crowd funding\\n/// @author Viktor M\\n/// @notice Demo sample\\n/// @dev The contract is used for getting price from oracle\\ncontract FundMe {\\n    // Type declarations and usings\\n    using PriceConverter for uint256;\\n\\n    // State variables\\n    uint256 public constant MIN_USD = 50 * 1e18;\\n    // consts and immutables are cheaper to read because they are not stored in Storage but are pert of a contracts byte code\\n    address private immutable I_OWNER;\\n    // arrays and mappings are stored in Storage as length num and blank respectively\\n    address[] private s_funders;\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    // Modifiers\\n    modifier onlyOwner() {\\n        // require(msg.sender == I_OWNER, \\\"Only owner can call withdraw\\\");\\n        // or\\n        if (msg.sender != I_OWNER) {\\n            revert FundMe__NotOwner();\\n        }\\n        _;\\n    }\\n\\n    // Events\\n\\n    // Functions\\n    // constructor\\n    constructor(address _priceFeedAddress) {\\n        I_OWNER = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(_priceFeedAddress);\\n    }\\n\\n    // receive and fallback\\n    // is triggered when obtaining eth\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    // is triggered when unknown function is called\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    // externals\\n\\n    // public\\n\\n    function fund() public payable {\\n        require(\\n            msg.value.convertEth(s_priceFeed) >= MIN_USD,\\n            \\\"Value should be greater than 0.015 eth(50$)\\\"\\n        );\\n\\n        s_funders.push(msg.sender);\\n        s_addressToAmountFunded[msg.sender] = msg.value;\\n    }\\n\\n    function withdraw() public payable onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n\\n        s_funders = new address[](0);\\n        //transfer\\n        // payable(msg.sender).transfer(address(this).balance);\\n        // //send\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess, \\\"Send failed\\\");\\n        //call\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess);\\n    }\\n\\n    function cheaperWithdraw() public payable onlyOwner {\\n        address[] memory funders = s_funders;\\n        // mappings cannot be in memory\\n\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n\\n        s_funders = new address[](0);\\n        //transfer\\n        // payable(msg.sender).transfer(address(this).balance);\\n        // //send\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess, \\\"Send failed\\\");\\n        //call\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess);\\n    }\\n\\n    // internal\\n\\n    // private\\n\\n    // view and pure\\n    function getOwner() public view returns (address) {\\n        return I_OWNER;\\n    }\\n\\n    function getFunder(uint256 _index) public view returns (address) {\\n        return s_funders[_index];\\n    }\\n\\n    function getAddressToAmountFunded(\\n        address _address\\n    ) public view returns (uint256) {\\n        return s_addressToAmountFunded[_address];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0x530a90781457bf867592d188ef53b77ea1870b34db26e5dfbe171a4af6d30e1f\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    function getEthUsd(\\n        AggregatorV3Interface _priceFeed\\n    ) internal view returns (uint256) {\\n        (, int256 answer, , , ) = _priceFeed.latestRoundData();\\n        uint256 decimals = 18 - uint256(_priceFeed.decimals());\\n        // Get price to have the same number of decimals as wei\\n        return uint256(answer * int256((uint256(10) ** decimals)));\\n    }\\n\\n    function convertEth(\\n        uint256 ethAmount,\\n        AggregatorV3Interface _priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getEthUsd(_priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x92c47c11da46f05934d22ce83926761a87167bc0736e2a56f318073f5eda8fbe\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620013533803806200135383398181016040528101906200003791906200011d565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200014f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e582620000b8565b9050919050565b620000f781620000d8565b81146200010357600080fd5b50565b6000815190506200011781620000ec565b92915050565b600060208284031215620001365762000135620000b3565b5b6000620001468482850162000106565b91505092915050565b6080516111da620001796000396000818161033201528181610538015261058801526111da6000f3fe60806040526004361061007f5760003560e01c80639e87a5cd1161004e5780639e87a5cd14610135578063b60d428814610160578063be2693f01461016a578063d7b4750c146101745761008e565b80630343fb2514610098578063213dbea2146100d55780633ccfd60b14610100578063893d20e81461010a5761008e565b3661008e5761008c6101b1565b005b6100966101b1565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610a96565b6102da565b6040516100cc9190610adc565b60405180910390f35b3480156100e157600080fd5b506100ea610323565b6040516100f79190610adc565b60405180910390f35b610108610330565b005b34801561011657600080fd5b5061011f610534565b60405161012c9190610b06565b60405180910390f35b34801561014157600080fd5b5061014a61055c565b6040516101579190610b80565b60405180910390f35b6101686101b1565b005b610172610586565b005b34801561018057600080fd5b5061019b60048036038101906101969190610bc7565b6107ee565b6040516101a89190610b06565b60405180910390f35b6802b5e3af16b18800006101f0600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461083590919063ffffffff16565b1015610231576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022890610c77565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6802b5e3af16b188000081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103b5576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561045a5760008082815481106103da576103d9610c97565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806001019150506103b8565b50600067ffffffffffffffff81111561047657610475610cc6565b5b6040519080825280602002602001820160405280156104a45781602001602082028036833780820191505090505b50600090805190602001906104ba92919061098c565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104e190610d26565b60006040518083038185875af1925050503d806000811461051e576040519150601f19603f3d011682016040523d82523d6000602084013e610523565b606091505b505090508061053157600080fd5b50565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461060b576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561068e57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610644575b5050505050905060005b81518110156107135760008282815181106106b6576106b5610c97565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550508080600101915050610698565b50600067ffffffffffffffff81111561072f5761072e610cc6565b5b60405190808252806020026020018201604052801561075d5781602001602082028036833780820191505090505b506000908051906020019061077392919061098c565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161079a90610d26565b60006040518083038185875af1925050503d80600081146107d7576040519150601f19603f3d011682016040523d82523d6000602084013e6107dc565b606091505b50509050806107ea57600080fd5b5050565b600080828154811061080357610802610c97565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061084183610871565b90506000670de0b6b3a7640000858361085a9190610d6a565b6108649190610ddb565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156108bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e39190610e99565b50505091505060008373ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610936573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095a9190610f4d565b60ff1660126109699190610f7a565b905080600a61097891906110e1565b82610983919061112c565b92505050919050565b828054828255906000526020600020908101928215610a05579160200282015b82811115610a045782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109ac565b5b509050610a129190610a16565b5090565b5b80821115610a2f576000816000905550600101610a17565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a6382610a38565b9050919050565b610a7381610a58565b8114610a7e57600080fd5b50565b600081359050610a9081610a6a565b92915050565b600060208284031215610aac57610aab610a33565b5b6000610aba84828501610a81565b91505092915050565b6000819050919050565b610ad681610ac3565b82525050565b6000602082019050610af16000830184610acd565b92915050565b610b0081610a58565b82525050565b6000602082019050610b1b6000830184610af7565b92915050565b6000819050919050565b6000610b46610b41610b3c84610a38565b610b21565b610a38565b9050919050565b6000610b5882610b2b565b9050919050565b6000610b6a82610b4d565b9050919050565b610b7a81610b5f565b82525050565b6000602082019050610b956000830184610b71565b92915050565b610ba481610ac3565b8114610baf57600080fd5b50565b600081359050610bc181610b9b565b92915050565b600060208284031215610bdd57610bdc610a33565b5b6000610beb84828501610bb2565b91505092915050565b600082825260208201905092915050565b7f56616c75652073686f756c642062652067726561746572207468616e20302e3060008201527f3135206574682835302429000000000000000000000000000000000000000000602082015250565b6000610c61602b83610bf4565b9150610c6c82610c05565b604082019050919050565b60006020820190508181036000830152610c9081610c54565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d10600083610cf5565b9150610d1b82610d00565b600082019050919050565b6000610d3182610d03565b9150819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d7582610ac3565b9150610d8083610ac3565b9250828202610d8e81610ac3565b91508282048414831517610da557610da4610d3b565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610de682610ac3565b9150610df183610ac3565b925082610e0157610e00610dac565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610e2b81610e0c565b8114610e3657600080fd5b50565b600081519050610e4881610e22565b92915050565b6000819050919050565b610e6181610e4e565b8114610e6c57600080fd5b50565b600081519050610e7e81610e58565b92915050565b600081519050610e9381610b9b565b92915050565b600080600080600060a08688031215610eb557610eb4610a33565b5b6000610ec388828901610e39565b9550506020610ed488828901610e6f565b9450506040610ee588828901610e84565b9350506060610ef688828901610e84565b9250506080610f0788828901610e39565b9150509295509295909350565b600060ff82169050919050565b610f2a81610f14565b8114610f3557600080fd5b50565b600081519050610f4781610f21565b92915050565b600060208284031215610f6357610f62610a33565b5b6000610f7184828501610f38565b91505092915050565b6000610f8582610ac3565b9150610f9083610ac3565b9250828203905081811115610fa857610fa7610d3b565b5b92915050565b60008160011c9050919050565b6000808291508390505b600185111561100557808604811115610fe157610fe0610d3b565b5b6001851615610ff05780820291505b8081029050610ffe85610fae565b9450610fc5565b94509492505050565b60008261101e57600190506110da565b8161102c57600090506110da565b8160018114611042576002811461104c5761107b565b60019150506110da565b60ff84111561105e5761105d610d3b565b5b8360020a91508482111561107557611074610d3b565b5b506110da565b5060208310610133831016604e8410600b84101617156110b05782820a9050838111156110ab576110aa610d3b565b5b6110da565b6110bd8484846001610fbb565b925090508184048111156110d4576110d3610d3b565b5b81810290505b9392505050565b60006110ec82610ac3565b91506110f783610ac3565b92506111247fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848461100e565b905092915050565b600061113782610e4e565b915061114283610e4e565b925082820261115081610e4e565b91507f8000000000000000000000000000000000000000000000000000000000000000841460008412161561118857611187610d3b565b5b828205841483151761119d5761119c610d3b565b5b509291505056fea2646970667358221220f1eccb90a75640bd9cadb6e0eba65a81684b3f5e9428fc39b79812a28195ea7464736f6c63430008180033",
  "deployedBytecode": "0x60806040526004361061007f5760003560e01c80639e87a5cd1161004e5780639e87a5cd14610135578063b60d428814610160578063be2693f01461016a578063d7b4750c146101745761008e565b80630343fb2514610098578063213dbea2146100d55780633ccfd60b14610100578063893d20e81461010a5761008e565b3661008e5761008c6101b1565b005b6100966101b1565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610a96565b6102da565b6040516100cc9190610adc565b60405180910390f35b3480156100e157600080fd5b506100ea610323565b6040516100f79190610adc565b60405180910390f35b610108610330565b005b34801561011657600080fd5b5061011f610534565b60405161012c9190610b06565b60405180910390f35b34801561014157600080fd5b5061014a61055c565b6040516101579190610b80565b60405180910390f35b6101686101b1565b005b610172610586565b005b34801561018057600080fd5b5061019b60048036038101906101969190610bc7565b6107ee565b6040516101a89190610b06565b60405180910390f35b6802b5e3af16b18800006101f0600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461083590919063ffffffff16565b1015610231576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022890610c77565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6802b5e3af16b188000081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103b5576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561045a5760008082815481106103da576103d9610c97565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806001019150506103b8565b50600067ffffffffffffffff81111561047657610475610cc6565b5b6040519080825280602002602001820160405280156104a45781602001602082028036833780820191505090505b50600090805190602001906104ba92919061098c565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104e190610d26565b60006040518083038185875af1925050503d806000811461051e576040519150601f19603f3d011682016040523d82523d6000602084013e610523565b606091505b505090508061053157600080fd5b50565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461060b576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561068e57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610644575b5050505050905060005b81518110156107135760008282815181106106b6576106b5610c97565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550508080600101915050610698565b50600067ffffffffffffffff81111561072f5761072e610cc6565b5b60405190808252806020026020018201604052801561075d5781602001602082028036833780820191505090505b506000908051906020019061077392919061098c565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161079a90610d26565b60006040518083038185875af1925050503d80600081146107d7576040519150601f19603f3d011682016040523d82523d6000602084013e6107dc565b606091505b50509050806107ea57600080fd5b5050565b600080828154811061080357610802610c97565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061084183610871565b90506000670de0b6b3a7640000858361085a9190610d6a565b6108649190610ddb565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156108bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e39190610e99565b50505091505060008373ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610936573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095a9190610f4d565b60ff1660126109699190610f7a565b905080600a61097891906110e1565b82610983919061112c565b92505050919050565b828054828255906000526020600020908101928215610a05579160200282015b82811115610a045782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109ac565b5b509050610a129190610a16565b5090565b5b80821115610a2f576000816000905550600101610a17565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a6382610a38565b9050919050565b610a7381610a58565b8114610a7e57600080fd5b50565b600081359050610a9081610a6a565b92915050565b600060208284031215610aac57610aab610a33565b5b6000610aba84828501610a81565b91505092915050565b6000819050919050565b610ad681610ac3565b82525050565b6000602082019050610af16000830184610acd565b92915050565b610b0081610a58565b82525050565b6000602082019050610b1b6000830184610af7565b92915050565b6000819050919050565b6000610b46610b41610b3c84610a38565b610b21565b610a38565b9050919050565b6000610b5882610b2b565b9050919050565b6000610b6a82610b4d565b9050919050565b610b7a81610b5f565b82525050565b6000602082019050610b956000830184610b71565b92915050565b610ba481610ac3565b8114610baf57600080fd5b50565b600081359050610bc181610b9b565b92915050565b600060208284031215610bdd57610bdc610a33565b5b6000610beb84828501610bb2565b91505092915050565b600082825260208201905092915050565b7f56616c75652073686f756c642062652067726561746572207468616e20302e3060008201527f3135206574682835302429000000000000000000000000000000000000000000602082015250565b6000610c61602b83610bf4565b9150610c6c82610c05565b604082019050919050565b60006020820190508181036000830152610c9081610c54565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d10600083610cf5565b9150610d1b82610d00565b600082019050919050565b6000610d3182610d03565b9150819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d7582610ac3565b9150610d8083610ac3565b9250828202610d8e81610ac3565b91508282048414831517610da557610da4610d3b565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610de682610ac3565b9150610df183610ac3565b925082610e0157610e00610dac565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610e2b81610e0c565b8114610e3657600080fd5b50565b600081519050610e4881610e22565b92915050565b6000819050919050565b610e6181610e4e565b8114610e6c57600080fd5b50565b600081519050610e7e81610e58565b92915050565b600081519050610e9381610b9b565b92915050565b600080600080600060a08688031215610eb557610eb4610a33565b5b6000610ec388828901610e39565b9550506020610ed488828901610e6f565b9450506040610ee588828901610e84565b9350506060610ef688828901610e84565b9250506080610f0788828901610e39565b9150509295509295909350565b600060ff82169050919050565b610f2a81610f14565b8114610f3557600080fd5b50565b600081519050610f4781610f21565b92915050565b600060208284031215610f6357610f62610a33565b5b6000610f7184828501610f38565b91505092915050565b6000610f8582610ac3565b9150610f9083610ac3565b9250828203905081811115610fa857610fa7610d3b565b5b92915050565b60008160011c9050919050565b6000808291508390505b600185111561100557808604811115610fe157610fe0610d3b565b5b6001851615610ff05780820291505b8081029050610ffe85610fae565b9450610fc5565b94509492505050565b60008261101e57600190506110da565b8161102c57600090506110da565b8160018114611042576002811461104c5761107b565b60019150506110da565b60ff84111561105e5761105d610d3b565b5b8360020a91508482111561107557611074610d3b565b5b506110da565b5060208310610133831016604e8410600b84101617156110b05782820a9050838111156110ab576110aa610d3b565b5b6110da565b6110bd8484846001610fbb565b925090508184048111156110d4576110d3610d3b565b5b81810290505b9392505050565b60006110ec82610ac3565b91506110f783610ac3565b92506111247fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848461100e565b905092915050565b600061113782610e4e565b915061114283610e4e565b925082820261115081610e4e565b91507f8000000000000000000000000000000000000000000000000000000000000000841460008412161561118857611187610d3b565b5b828205841483151761119d5761119c610d3b565b5b509291505056fea2646970667358221220f1eccb90a75640bd9cadb6e0eba65a81684b3f5e9428fc39b79812a28195ea7464736f6c63430008180033",
  "devdoc": {
    "author": "Viktor M",
    "details": "The contract is used for getting price from oracle",
    "kind": "dev",
    "methods": {},
    "title": "A contact for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Demo sample",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 67,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 71,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 74,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}